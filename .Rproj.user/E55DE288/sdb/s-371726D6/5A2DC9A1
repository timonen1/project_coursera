{
    "contents" : "# If this file was not opened using the project file, please set the working \n# directory. \n# setwd(\"..../project_coursera\")\n\n# Please put the extracted files from th \"UCI HAR Dataset\" in the folder\n# \"/data/UCI HAR Dataset or uncomment and run the code below to download and unzip \n# the data\n\n# # Create data directory\n# if( !file.exists(\"data\") ){\n#   dir.create(\"data\")\n# }\n# \n# # Create zip-directory\n# if( !file.exists(\"zipFiles\") ){\n#   dir.create(\"zipFiles\")\n# }\n# \n# # Download the zip-file\n# download.file(url=\"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip\",\n#               destfile=\"zipFiles/UCI_HAR.zip\")\n# \n# # unzip the file to the data-folder\n# unzip(zipfile=\"./zipFiles/UCI_HAR.zip\", exdir=\"./data\")\n\n\n\n\n\n\n### Libraries ------------------------------------------------------------------\n#install.packages('data.table')\n#install.packages('reshape2')\nlibrary(reshape2)\nlibrary(data.table)\n\n\n### 1. Merges the training and the test sets to create one data set. -----------\n\n## training data \n\n# y_train data (activity ID)\ny_train <- read.table(\"./data/UCI HAR Dataset/train/y_train.txt\", as.is=TRUE)\n\n# X_train data (measurements)\nX_train <- read.table(\"./data/UCI HAR Dataset/train/X_train.txt\", as.is=TRUE)\n\n# subject_train (subject performing the activity)\nsubject_train <- read.table(\"./data/UCI HAR Dataset/train/subject_train.txt\", \n                            as.is=TRUE)\n\n## test data\n\n# y_train data (activity ID)\ny_test <- read.table(\"./data/UCI HAR Dataset/test/y_test.txt\", as.is=TRUE)\n\n# X_train data (measurements)\nX_test <- read.table(\"./data/UCI HAR Dataset/test/X_test.txt\", as.is=TRUE)\n\n# subject_train (subject performing the activity)\nsubject_test <- read.table(\"./data/UCI HAR Dataset/test/subject_test.txt\", \n                            as.is=TRUE)\n\n# Check dimensions of the data\n# dim(X_train)\n# dim(X_test)\n# \n# dim(y_train)\n# dim(y_test)\n# \n# dim(subject_train)\n# dim(subject_test)\n\n## Combine the data by type\n\n# y (also changing the column-name)\ny <- rbind(y_train, y_test) \nnames(y) <- \"activity_ID\"\n\n# X\nX <- rbind(X_train, X_test)\n\n# subject (also changing the column-name)\nsubject <- rbind(subject_train, subject_test)\nnames(subject) <- \"subject_ID\"\n\n## Combine all types into one dataset (put the subject_ID and the activity_ID\n# at the end for convience)\ndata <- cbind(X, subject, y)\n\n\n### 2. Extract only the measurements on the mean and standard deviation for \n# each measurement. \n\n# Extract all variable names for the X-dataset\nfeatures <- read.table(\"./data/UCI HAR Dataset/features.txt\", as.is=TRUE)\n\n# I have chosen to select all variables containg \"std\" or \"mean\" in the \n# variable name.\n\n# select the indices of all variable names containing the substring \"std\" or \"mean\"\n# the select is also case-insensitive.\nindex <- grep(pattern=\"(std|mean)\", x=tolower(features$V2) )\n\n# Extract the variable names \ninitialMeasurmentNames <- paste0(\"V\", index)\nNewMeasurementNames <- features$V2[index]\n\n## Select only the \"subject\", \"activity_ID\" and columns containing mean and \n# std-measurements.      \ndata <- data[, c(initialMeasurmentNames, \"subject_ID\", \"activity_ID\")]\n\n\n### 3. Uses descriptive activity names to name the activities in the data set --\n\n# Extract the activity names\nactivity_labels <- read.table(\"./data/UCI HAR Dataset/activity_labels.txt\", \n                              as.is=TRUE)\n\n# renameing the dataset\nnames(activity_labels) <- c(\"activity_ID\", \"activity\")\n\n# Mergeing the activity names to the dataset \ndata <- merge(data, activity_labels, by=\"activity_ID\", all.x=TRUE)\n\n# drop the activity_ID\ndata$activity_ID <- NULL\n\n\n### 4. Appropriately labels the data set with descriptive variable names. ------\n\n# Convert the data to data.table format\ndataDT <- as.data.table(data)\n\n# replaceing the \"V1-V561\"-values to their corresponding names\nsetnames(dataDT, initialMeasurmentNames, NewMeasurementNames)\n\n# rearranging the data set so that the grouping variables are the first columns in the \n# dataset\ndataDT <- dataDT[,c(\"activity\",\"subject_ID\", NewMeasurementNames), with=FALSE]\n\n# Order the dataset by activity and subject_ID\ndataDT <- dataDT[order(activity, subject_ID)]\n\n\n### 5. From the data set in step 4, creates a second, independent tidy data set \n# with the average of each variable for each activity and each subject.\n\n# Melt the data to long-format\ndataLong <- melt(dataDT, id=c(\"activity\", \"subject_ID\"), measure.vars=NewMeasurementNames)\n\n# compute the mean by of each variable grouped by activty and subject\nresult <- dataLong[, mean(value), by=c(\"activity\", \"subject_ID\", \"variable\")]\n\n# write the final dataset\n#write.table(result, file=\"./data/result.txt\", row.name=FALSE)\n",
    "created" : 1426959500948.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3445777911",
    "id" : "5A2DC9A1",
    "lastKnownWriteTime" : 1426955479,
    "path" : "C:/R filer/gitrepos/project_coursera/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}